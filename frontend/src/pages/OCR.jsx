import { useState, useRef, useEffect } from 'react'
import { speak } from '../services/speechSynthesis'
import { performOCR } from '../services/api'

export default function OCR() {
  const [image, setImage] = useState(null)
  const [text, setText] = useState('')
  const [language, setLanguage] = useState('')
  const [tempLanguage, setTempLanguage] = useState(null)
  const [tempText, setTempText] = useState('')
  const [isProcessing, setIsProcessing] = useState(false)
  const [isUsingTemp, setIsUsingTemp] = useState(false)
  const fileInputRef = useRef(null)
  const videoRef = useRef(null)
  const canvasRef = useRef(null)
  const [stream, setStream] = useState(null)
  const resultSectionRef = useRef(null);

  useEffect(() => {
    speak('Trang nh·∫≠n di·ªán vƒÉn b·∫£n. B·∫°n c√≥ th·ªÉ t·∫£i l√™n h√¨nh ·∫£nh ho·∫∑c ch·ª•p ·∫£nh tr·ª±c ti·∫øp.')
  }, [])

  const handleFileChange = (e) => {
    const file = e.target.files[0]
    if (file) {
      const reader = new FileReader()
      reader.onload = (event) => {
        setImage(event.target.result)
      }
      reader.readAsDataURL(file)
    }
  }

  const startCamera = async () => {
    try {
      const mediaStream = await navigator.mediaDevices.getUserMedia({ video: true })
      videoRef.current.srcObject = mediaStream
      setStream(mediaStream)
      speak('Camera ƒë√£ b·∫≠t. H√£y h∆∞·ªõng camera v√†o vƒÉn b·∫£n c·∫ßn nh·∫≠n di·ªán.')
    } catch (err) {
      speak('Kh√¥ng th·ªÉ truy c·∫≠p camera. Vui l√≤ng ki·ªÉm tra quy·ªÅn truy c·∫≠p.')
      console.error('Camera error:', err)
    }
  }

  const stopCamera = () => {
    if (stream) {
      stream.getTracks().forEach(track => track.stop())
      setStream(null)
    }
  }

  const captureImage = () => {
    if (videoRef.current && canvasRef.current) {
      const video = videoRef.current
      const canvas = canvasRef.current
      canvas.width = video.videoWidth
      canvas.height = video.videoHeight
      const ctx = canvas.getContext('2d')
      ctx.drawImage(video, 0, 0, canvas.width, canvas.height)

      const imageData = canvas.toDataURL('image/jpeg')
      setImage(imageData)
      speak('ƒê√£ ch·ª•p ·∫£nh. B·∫°n c√≥ th·ªÉ nh·∫•n n√∫t nh·∫≠n di·ªán vƒÉn b·∫£n.')
    }
  }

  const processOCR = async () => {
    if (!image) {
      speak('Vui l√≤ng t·∫£i l√™n h√¨nh ·∫£nh ho·∫∑c ch·ª•p ·∫£nh tr∆∞·ªõc khi nh·∫≠n di·ªán.')
      return
    }

    setIsProcessing(true)
    speak('ƒêang x·ª≠ l√Ω h√¨nh ·∫£nh...')

    try {
      const result = await performOCR(image)
      console.log(result)
      setText(result.text)
      setLanguage(result.language)  // L∆∞u ng√¥n ng·ªØ ph√°t hi·ªán
      setTempLanguage(result.tempLanguage)
      setTempText(result.tempText)
      speak(`K·∫øt qu·∫£ nh·∫≠n di·ªán: ${result.text}. Ng√¥n ng·ªØ nh·∫≠n di·ªán l√† ${result.language}.`)
      speak(`ƒê√¢y c≈©ng c√≥ th·ªÉ l√† ng√¥n ng·ªØ ${result.tempLanguage}. B·∫°n c√≥ mu·ªën chuy·ªÉn sang kh√¥ng?`)
      setTimeout(() => {
        scrollToResults();
      }, 300);
    } catch (error) {
      speak('C√≥ l·ªói x·∫£y ra khi nh·∫≠n di·ªán vƒÉn b·∫£n.')
      console.error('OCR error:', error)
    } finally {
      setIsProcessing(false)
    }
  }

  const readText = () => {
    if (text) {
      speak(text)
    } else {
      speak('Kh√¥ng c√≥ vƒÉn b·∫£n ƒë·ªÉ ƒë·ªçc.')
    }
  }

  const scrollToResults = () => {
    if (resultSectionRef.current) {
      resultSectionRef.current.scrollIntoView({
        behavior: 'smooth',
        block: 'start'
      });
    }
  };

  const switchToTempLanguage = () => {
    setIsUsingTemp(true)
    speak(`ƒê√£ chuy·ªÉn sang ng√¥n ng·ªØ ${tempLanguage}. N·ªôi dung l√†: ${tempText}`)
  }

  const switchBackToOriginalLanguage = () => {
    setIsUsingTemp(false)
    speak(`ƒê√£ quay l·∫°i ng√¥n ng·ªØ ${language}. N·ªôi dung l√†: ${text}`)
  }

  return (
    <div className="ocr-page">
      <h2>Nh·∫≠n di·ªán vƒÉn b·∫£n</h2>

      <div className="ocr-options">
        <div className="upload-section">
          <button onClick={() => fileInputRef.current.click()}>
            <span>üìÅ</span> T·∫£i l√™n h√¨nh ·∫£nh
          </button>
          <input
            type="file"
            ref={fileInputRef}
            onChange={handleFileChange}
            accept="image/*"
            style={{ display: 'none' }}
          />
        </div>

        <div className="camera-section">
          {!stream ? (
            <button onClick={startCamera}>
              <span>üì∑</span> B·∫≠t camera
            </button>
          ) : (
            <>
              <button onClick={captureImage}>
                <span>üì∏</span> Ch·ª•p ·∫£nh
              </button>
              <button onClick={stopCamera}>
                <span>‚èπÔ∏è</span> T·∫Øt camera
              </button>
            </>
          )}
        </div>
      </div>

      <div className="preview-area">
        {stream && (
          <div className="camera-preview">
            <video ref={videoRef} autoPlay playsInline muted />
            <canvas ref={canvasRef} style={{ display: 'none' }} />
          </div>
        )}

        {image && !stream && (
          <div className="image-preview">
            <img src={image} alt="Preview" />
          </div>
        )}

        {!image && !stream && (
          <div className="empty-preview">
            <p>T·∫£i l√™n h√¨nh ·∫£nh ho·∫∑c ch·ª•p ·∫£nh ƒë·ªÉ b·∫Øt ƒë·∫ßu</p>
          </div>
        )}
      </div>

      <button
        onClick={processOCR}
        disabled={isProcessing || !image}
        className="process-button"
      >
        {isProcessing ? 'ƒêang x·ª≠ l√Ω...' : 'Nh·∫≠n di·ªán vƒÉn b·∫£n'}
      </button>

      {text && (
        <div className="result-section" ref={resultSectionRef}>
          <div className="result-header">
            <h3>K·∫øt qu·∫£ nh·∫≠n di·ªán</h3>
            <div className="language-badge">
              <span>Ng√¥n ng·ªØ: {isUsingTemp ? tempLanguage : language}</span>
              {tempLanguage && (
                <div className="switch-language">
                  {!isUsingTemp ? (
                    <>
                      <p>ƒê√¢y c≈©ng c√≥ th·ªÉ l√† ng√¥n ng·ªØ <strong>{tempLanguage}</strong>. B·∫°n c√≥ mu·ªën chuy·ªÉn sang kh√¥ng?</p>
                      <button onClick={switchToTempLanguage} className="language-switch-button">
                        Chuy·ªÉn sang {tempLanguage}
                      </button>
                    </>
                  ) : (
                    <button onClick={switchBackToOriginalLanguage} className="language-switch-button">
                      Quay l·∫°i {language}
                    </button>
                  )}
                </div>
              )}
            </div>
          </div>

          <div className="text-result-container">
            <div className="text-result">
              {isUsingTemp ? tempText : text}
            </div>
            <div className="text-actions">
              <button
                onClick={() => speak(isUsingTemp ? tempText : text)}
                className="text-action-button"
              >
                <span>üîä</span> ƒê·ªçc k·∫øt qu·∫£
              </button>
              <button
                onClick={() => copyToClipboard(isUsingTemp ? tempText : text)}
                className="text-action-button"
              >
                <span>üìã</span> Sao ch√©p
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}